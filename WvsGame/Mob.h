#pragma once
#include <map>
#include "FieldObj.h"
#include "MobStat.h"

class MobTemplate;
class Controller;
class User;

class Mob : public FieldObj
{
private:
	const MobTemplate* m_pMobTemplate;

	std::map<int, long long int> m_mAttackRecord;
	Controller* m_pController;

public:
	Mob();
	~Mob();

	// 正服取得
	enum MOBSKILL
	{
		MOBSKILL_POWERUP = 0x64,
		MOBSKILL_MAGICUP = 0x65,
		MOBSKILL_PGUARDUP = 0x66,
		MOBSKILL_MGUARDUP = 0x67,
		MOBSKILL_HASTE = 0x68,
		MOBSKILL_MOBCONSUME = 0x69,
		MOBSKILL_POWERUP_M = 0x6E,
		MOBSKILL_MAGICUP_M = 0x6F,
		MOBSKILL_PGUARDUP_M = 0x70,
		MOBSKILL_MGUARDUP_M = 0x71,
		MOBSKILL_HEAL_M = 0x72,
		MOBSKILL_HASTE_M = 0x73,
		MOBSKILL_SEAL = 0x78,
		MOBSKILL_DARKNESS = 0x79,
		MOBSKILL_WEAKNESS = 0x7A,
		MOBSKILL_STUN = 0x7B,
		MOBSKILL_CURSE = 0x7C,
		MOBSKILL_POISON = 0x7D,
		MOBSKILL_SLOW = 0x7E,
		MOBSKILL_DISPEL = 0x7F,
		MOBSKILL_ATTRACT = 0x80,
		MOBSKILL_BANMAP = 0x81,
		MOBSKILL_AREA_FIRE = 0x82,
		MOBSKILL_AREA_POISON = 0x83,
		MOBSKILL_REVERSE_INPUT = 0x84,
		MOBSKILL_UNDEAD = 0x85,
		MOBSKILL_STOPPORTION = 0x86,
		MOBSKILL_STOPMOTION = 0x87,
		MOBSKILL_FEAR = 0x88,
		MOBSKILL_FROZEN = 0x89,
		MOBSKILL_DISPEL_ITEMOPTION = 0x8A,
		MOBSKILL_PHYSICALIMMUNE = 0x8C,
		MOBSKILL_MAGICIMMUNE = 0x8D,
		MOBSKILL_HARDSKIN = 0x8E,
		MOBSKILL_PCOUNTER = 0x8F,
		MOBSKILL_MCOUNTER = 0x90,
		MOBSKILL_PMCOUNTER = 0x91,
		MOBSKILL_INVINCIBLE = 0x92,
		MOBSKILL_PAD = 0x96,
		MOBSKILL_MAD = 0x97,
		MOBSKILL_PDR = 0x98,
		MOBSKILL_MDR = 0x99,
		MOBSKILL_ACC = 0x9A,
		MOBSKILL_EVA = 0x9B,
		MOBSKILL_SPEED = 0x9C,
		MOBSKILL_SEALSKILL = 0x9D,
		MOBSKILL_BALROGCOUNTER = 0x9E,
		MOBSKILL_TELEPORT = 0xAA,
		MOBSKILL_USER_BOMB = 0xAB,
		MOBSKILL_USER_MORPH = 0xAC,
		MOBSKILL_DARKTORNADO = 0xAD,
		MOBSKILL_LAPIDIFICATION = 0xAE,
		MOBSKILL_DEATHMARK = 0xAF,
		MOBSKILL_DAMAGE = 0xB0,
		MOBSKILL_VENOMSNAKE = 0xB1,
		MOBSKILL_SLOWATTACK = 0xB2,
		MOBSKILL_PAINMARK = 0xB3,
		MOBSKILL_VAMPDEATH = 0xB4,
		MOBSKILL_MAGNET = 0xB5,
		MOBSKILL_GIVEMEHEAL = 0xB6,
		MOBSKILL_FIRE_BOMB = 0xB7,
		MOBSKILL_RETURNTELEPORT = 0xB8,
		MOBSKILL_AREA_FORCE = 0xBA,
		MOBSKILL_DAZZLE = 0xBC,
		MOBSKILL_NEAR_BUFF = 0xBB,
		MOBSKILL_CAPDEBUFF_RED = 0xBD,
		MOBSKILL_CAPDEBUFF_BLUE = 0xBE,
		MOBSKILL_AREA_TIMEZONE = 0xBF,
		MOBSKILL_SUMMON = 0xC8,
		MOBSKILL_SUMMON2 = 0xC9,
		MOBSKILL_PASSIVE_FIREWALK = 0xCA,
		MOBSKILL_BREAKDOWN_TIMEZONE = 0xCB,
		MOBSKILL_ALL_KILL = 0xCC,
		MOBSKILL_FIRE_BOMB_DISPEL = 0xCD,
		MOBSKILL_AREA_TOSP = 0xCE,
		MOBSKILL_HEKATON = 0xCF,
		MOBSKILL_STUNMADE_BODY = 0xD0,
		MOBSKILL_RESET_MOBSTAT = 0xD1,
		MOBSKILL_AREA_ABNORMAL = 0xD3,
		MOBSKILL_AREA_MOBBUFF = 0xD4,
		MOBSKILL_AREA_WARNING = 0xD5,
		MOBSKILL_CASTINGBAR = 0xD6,
		MOBSKILL_OBSTACLE_ATTACK = 0xD7,
		MOBSKILL_FIXDAMR_BUFF = 0xD8,
		MOBSKILL_BOUNCE_ATTACK = 0xD9,
		MOBSKILL_DEBUFF_HALF = 0xDB,
		MOBSKILL_KNOCKBACK = 0xDC,
		MOBSKILL_AREA_INSTALL_BUFF = 0xDD,
		MOBSKILL_AREA_INSTALLED_FIRE = 0xDE,
		MOBSKILL_LASER_ATTACK = 0xDF,
		MOBSKILL_LTRBDAMAGE = 0xE0,
		MOBSKILL_SUMMONSUBBODY = 0xE1,
		MOBSKILL_TOOS = 0xE2,
		MOBSKILL_AREA_FORCE_FROM_USER = 0xE3,
		MOBSKILL_LASER_CONTROL = 0xE4,
		MOBSKILL_DEC_JUMP = 0xE5,
		MOBSKILL_FIRE_AT_RANDOM_ATTACK = 0xE6,
		MOBSKILL_BATTLEFIELD_DEAD = 0xE7,
		MOBSKILL_TOUCHME = 0xE8,
		MOBSKILL_POWER_IMMUNE = 0xE9,
		MOBSKILL_CONTAGION = 0xEA,
		MOBSKILL_FIELD_COMMAND = 0xEB,
		MOBSKILL_HANGOVER = 0xEC,
		MOBSKILL_STIGMA = 0xED,
		MOBSKILL_NO = 0xEE,
	};

	void MakeEnterFieldPacket(OutPacket *oPacket);
	void MakeLeaveFieldPacket(OutPacket *oPacket);
	void EncodeInitData(OutPacket *oPacket, bool bIsControl = false);
	void SendChangeControllerPacket(User* pUser, int nLevel);
	void SendReleaseControllPacket(User* pUser, int dwMobID);
	void SetMobTemplate(MobTemplate *pTemplate);
	const MobTemplate* GetMobTemplate() const;

	MobStat* mStat;

	void SetController(Controller* pController);
	Controller* GetController();

	void SetMovePosition(int x, int y, char bMoveAction, short nSN);

	//解析怪物移動時，Lucid有些怪物移動封包多兩個bytes
	static bool IsLucidSpecialMob(int dwTemplateID);
	void OnMobHit(User* pUser, long long int nDamage, int nAttackType);
	void OnMobDead(int nHitX, int nHitY, int nMesoUp, int nMesoUpByItem);
	void DistributeExp(int& refOwnType, int& refOwnParyID, int& refLastDamageCharacterID);
	void GiveReward(unsigned int dwOwnerID, unsigned int dwOwnPartyID, int nOwnType, int nX, int nY, int tDelay, int nMesoUp, int nMesoUpByItem);

	std::pair<int, int> GetDropPos();
};

